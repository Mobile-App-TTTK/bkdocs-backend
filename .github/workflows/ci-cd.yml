name: CI/CD Pipeline

on:
  push:   # ðŸ‘‰ Manual trigger, khÃ´ng tá»± Ä‘á»™ng khi push
    branches:
      - main

jobs:
  # ========================
  # 1. Build & Test
  # ========================
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Start Postgres (Docker Compose)
        run: |
          docker compose up -d postgres
          sleep 10
          npm run migration:run

      - name: Run Tests
        run: npm run test

  # ========================
  # 2. Build & Push Docker Image
  # ========================
  docker_build_and_push:
    runs-on: ubuntu-latest
    environment: production 
    needs: build_and_test
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE_TAG=latest
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .

      - name: Push to ECR
        run: |
          IMAGE_TAG=latest
          docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  # ========================
  # 3. Deploy to AWS EC2
  # ========================
  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: docker_build_and_push
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # CÃ i Docker + AWS CLI náº¿u chÆ°a cÃ³
            if ! command -v docker &> /dev/null
            then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker ubuntu
            fi
            if ! command -v docker compose &> /dev/null
            then
              sudo apt-get update && sudo apt-get install -y docker-compose-plugin
            fi
            if ! command -v aws &> /dev/null
            then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            # Export AWS credentials tá»« Secrets
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=ap-southeast-1

            # Login ECR
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
            
            # Chuáº©n bá»‹ thÆ° má»¥c app
            mkdir -p ~/mobile-app && cd ~/mobile-app

            # Ghi file env.prod tá»« GitHub Secrets
            echo "${{ secrets.ENV_PROD_FILE }}" > .env.prod

            # Copy file docker-compose.prod.yml náº¿u chÆ°a cÃ³
            # if [ ! -f docker-compose.prod.yml ]; then
            #   echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > docker-compose.prod.yml
            # fi

            # Pull image má»›i
            docker compose --env-file .env.prod -f docker-compose.prod.yml pull 

            # Start container backend + postgres
            docker compose --env-file .env.prod -f docker-compose.prod.yml up -d

            # Cháº¡y migration trong container NestJS
            docker compose --env-file .env.prod -f docker-compose.prod.yml exec -T nestjs npm run migration:run
