name: CI/CD Pipeline

on:
  push:
    branches:
      - main # üëâ T·ª± ƒë·ªông ch·∫°y khi push code l√™n nh√°nh main

jobs:
  # ========================
  # 1. Build & Test
  # ========================
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Start Postgres (Docker Compose)
        run: |
          docker compose up -d postgres
          sleep 10
          npm run migration:run

      - name: Run Tests
        run: npm run test

  # ========================
  # 2. Build & Push Docker Image
  # ========================
  docker_build_and_push:
    runs-on: ubuntu-latest
    environment: production
    needs: build_and_test
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify typeorm.config.ts version
        run: |
          echo "===== typeorm.config.ts HEAD content ====="
          grep migrations typeorm.config.ts
      - name: Build Docker image
        run: |
          IMAGE_TAG=latest
          docker build --no-cache -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .

      - name: Verify dist/main.js exists in image
        run: |
          IMAGE_TAG=latest
          docker run --rm ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ls -R dist || (echo "‚ùå dist not found in image" && exit 1)

      - name: Push to ECR
        run: |
          IMAGE_TAG=latest
          docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  # ========================
  # 3. Deploy to AWS EC2
  # ========================
  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: docker_build_and_push
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Copy docker-compose.prod.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: 'docker-compose.prod.yml'
          target: '~/mobile-app/'

      - name: Copy .env.prod
        run: echo "${{ secrets.ENV_PROD_FILE }}" > .env.prod
        shell: bash

      - name: Upload .env.prod to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: '.env.prod'
          target: '~/mobile-app/'

      - name: Deploy to EC2 (clean old image + pull new)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/mobile-app

            echo "üßπ D·ª´ng container c≈©..."
            docker compose -f docker-compose.prod.yml stop backend

            echo "üßΩ X√≥a t·∫•t c·∫£ image c≈© kh√¥ng c√≤n d√πng..."
            docker image prune -a -f

            echo "üß± X√≥a cache & dangling layers..."
            docker system prune -f

            echo "üîê Login v√†o ECR..."
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

            echo "üì¶ K√©o image m·ªõi nh·∫•t..."
            docker compose --env-file .env.prod -f docker-compose.prod.yml pull --no-cache

            echo "üöÄ Kh·ªüi ƒë·ªông l·∫°i container..."
            docker compose --env-file .env.prod -f docker-compose.prod.yml up -d --force-recreate

            echo "‚úÖ Ki·ªÉm tra digest hi·ªán t·∫°i:"
            docker inspect 528192012668.dkr.ecr.ap-southeast-1.amazonaws.com/mobile-app-backend:latest | grep sha256 || true
